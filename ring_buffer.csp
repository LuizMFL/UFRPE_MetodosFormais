-- Ring Buffer (https://blog.pantuza.com/artigos/ring-buffer)
-- Lista circular usada para armazenar informações e que possui um tamanho fixo em que o fim se conecta com o início
-- O acesso aos dados segue a regra FIFO (First-in, First-out)
-- 2 variáveis que armazenam o início e fim da fila
-- Tanto a inserção e remoção é feita em tempo constante
-- Cada área da lista (ou célula) é um processo CSP
-- Existe um processo controlador que gerencia a inserção e a remoção dos elementos nas células do Ring Buffer.
-- Os processos das células rodam em paralelo mas sem comunicação entre eles
-- Há sincronização entre o processo do controlador e o processo das células.
-- Verifique que ela é livre de deadlock e não determinismo.q Int)

channel out
channel in: { 0..5 }.{ 0..100}
channel allowed: { 0..5 }

P(id, data) = 
    out?id!data -> P(id, -1)
    []
    in?id?n -> P(id, n)

add_in_queue(id, queue, tail_index) = 
    if ( queue == <> ) then
        <>
    else if ( tail_index == 0 ) then
        <id>^tail(queue)
    else
        <head(queue)>^add(id, tail(queue), tail_index - 1)

RING_BUFFER(queue, head_value, tail_value) =
    head_value != tail_value -> {
        in?id?value -> @new_queue: add_in_queue(id, queue, tail_value) -> P(id, value) [|{|, escrever|}|] RING_BUFFER(new_queue, head_value, (tail_value + 1) % #new_queue) 
        []
        out -> RUN_OUT(head(queue)); RING_BUFFER(queue, (head_value + 1) % #queue, tail_value)
    }


